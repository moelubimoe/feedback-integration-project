import json
import pika
import time
import os
import sqlalchemy
from sqlalchemy import create_engine, Column, Integer, String, Text, TIMESTAMP, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from webhook import send_telegram_message  # ‚ö†Ô∏è –±–µ–∑ 'app.' ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
POSTGRES_USER = os.getenv("POSTGRES_USER", "feedback_user")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "secret_password")
POSTGRES_DB = os.getenv("POSTGRES_DB", "feedback_db")
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "localhost")
POSTGRES_PORT = os.getenv("POSTGRES_PORT", "5432")

DATABASE_URL = f"postgresql://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"

# SQLAlchemy ORM
Base = declarative_base()

class Feedback(Base):
    __tablename__ = "feedback"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String)
    email = Column(String)
    message = Column(Text)
    source = Column(String)
    created_at = Column(TIMESTAMP, server_default=func.now())

# –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ –∏ —Å–µ—Å—Å–∏—é
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ—Ç
Base.metadata.create_all(bind=engine)

def save_to_db(data, retries=3):
    for attempt in range(retries):
        try:
            db = SessionLocal()
            feedback = Feedback(
                name=data["name"],
                email=data["email"],
                message=data["message"],
                source=data["source"]
            )
            db.add(feedback)
            db.commit()
            db.close()
            print("üíæ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
            return
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1} –∏–∑ {retries}: {e}")
            time.sleep(1)
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

def callback(ch, method, properties, body):
    print("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏:")
    try:
        data = json.loads(body)
        print(json.dumps(data, indent=2, ensure_ascii=False))

        save_to_db(data)

        # ‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_message(data)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

def start_consumer():
    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
    channel = connection.channel()
    channel.queue_declare(queue='feedback', durable=True)

    channel.basic_consume(queue='feedback', on_message_callback=callback, auto_ack=True)

    print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ 'feedback'...")
    channel.start_consuming()

if __name__ == "__main__":
    start_consumer()
